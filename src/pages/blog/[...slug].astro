---
export const prerender = true;

import {
  getAllPosts,
  extractFrontmatter,
  getSiteSettings,
} from "../../core/blogLogic";
import { getCollection, render } from "astro:content";
import MarkdownPostLayout from "../../layouts/MarkdownPostLayout.astro";
import { generateBlogPostSchemaData } from "../../core/seo";

// Import affiliate marketing components to make them globally available
import Product from "../../components/Product.astro";
import ProductCard from "../../components/ProductCard.astro";
import Comparison from "../../components/Comparison.astro";
import ComparisonTable from "../../components/ComparisonTable.astro";
import YouTube from "../../components/ui/YouTube.astro";


// Import new affiliate block components
import ProductBlock from "../../components/blocks/ProductBlock.astro";
import ProductBlock2 from "../../components/blocks/ProductBlock2.astro";
import ProductBlock3 from "../../components/blocks/ProductBlock3.astro";
import ProductBlock4 from "../../components/blocks/ProductBlock4.astro";
import ProductBlock5 from "../../components/blocks/ProductBlock5.astro";
import ProductBlock6 from "../../components/blocks/ProductBlock6.astro";
import ProductBlock7 from "../../components/blocks/ProductBlock7.astro";
import ComparisonBlock from "../../components/blocks/ComparisonBlock.astro";
import CategoryBlock from "../../components/blocks/CategoryBlock.astro";

export async function getStaticPaths() {
  const posts = await getAllPosts();
  
  // Create paths for all existing posts
  const validPaths = posts.map(post => ({
    params: { slug: post.id },
    props: { post, exists: true },
  }));
  
  // Add a catch-all for potential 404s (optional - for better error handling)
  return validPaths;
}

const { slug } = Astro.params;
const { post, exists } = Astro.props;

// If we somehow get here without a valid post, redirect to 404
if (!post || !exists) {
  return Astro.redirect('/404');
}

const { Content } = await render(post);

// âœ… CLEAN: Use core function for frontmatter
const frontmatter = extractFrontmatter(post);

// Generate SEO data with FAQ support
const settings = await getSiteSettings();
const currentUrl = `${settings.siteUrl}/blog/${post.id}`;
const rawContent = post.body; // Get raw MDX content for FAQ parsing
const schemaData = await generateBlogPostSchemaData(frontmatter, currentUrl, 'Article', rawContent);
---

<MarkdownPostLayout frontmatter={frontmatter} schemaData={schemaData}>
  <Content
    components={{
      Product,
      ProductCard,
      Comparison,
      ComparisonTable,
      YouTube,
      ProductBlock,
      ProductBlock2,
      ProductBlock3,
      ProductBlock4,
      ProductBlock5,
      ProductBlock6,
      ProductBlock7,
      ComparisonBlock,
      CategoryBlock,
    }}
  />
</MarkdownPostLayout>