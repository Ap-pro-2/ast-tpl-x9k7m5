---
/**
 * Premium Magazine-Style Blog Post Card
 * Professional design with theme system integration
 */

import { getEntry } from 'astro:content';
import { formatDate } from '../../core/blogLogic';

interface Props {
  title: string;
  url: string;
  description?: string;
  image?: any;
  tags?: any[];
  authorId?: string;
  categoryId?: string;
  post?: any;
}

const { title, url, description, image, tags = [], authorId, categoryId, post } = Astro.props;

// If post is provided, use its data
const postData = post || {
  data: {
    title,
    description,
    image,
    tags,
    author: authorId ? { id: authorId } : null,
    category: categoryId ? { id: categoryId } : null
  },
  id: url.replace('/blog/', '')
};

// Get category data safely
let category = null;
try {
  if (postData.data.category) {
    const categoryId = typeof postData.data.category === 'string' ? postData.data.category : postData.data.category.id;
    category = await getEntry('categories', categoryId);
  }
} catch (error) {
  console.warn('Could not load category:', error);
}

// Get author data safely
let author = null;
try {
  if (postData.data.author) {
    const authorId = typeof postData.data.author === 'string' ? postData.data.author : postData.data.author.id;
    author = await getEntry('authors', authorId);
  }
} catch (error) {
  console.warn('Could not load author:', error);
}

// Handle tags properly
const postTags = postData.data.tags || [];
const tagNames = postTags.map((tag: any) => {
  if (typeof tag === 'string') return tag;
  if (tag?.id) return tag.id;
  if (tag?.data?.name) return tag.data.name;
  return null;
}).filter(Boolean);

// Calculate read time (rough estimate)
const readTime = Math.max(1, Math.ceil((postData.data.description?.length || 200) / 200));
---

<!-- Premium Magazine-Style Card -->
<article class="group relative h-full rounded-2xl overflow-hidden transition-all duration-500 hover:-translate-y-2 hover:shadow-2xl"
         style="background: var(--surface-card); border: 1px solid var(--border-default); box-shadow: 0 4px 20px rgba(0,0,0,0.08);">
  
  <!-- Compact Featured Image -->
  {postData.data.image?.url ? (
    <div class="relative aspect-[16/10] overflow-hidden">
      <img 
        src={postData.data.image.url} 
        alt={postData.data.image.alt || postData.data.title}
        loading="lazy"
        class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-105"
      />
      
      <!-- Category Badge -->
      {category && (
        <div class="absolute top-3 left-3">
          <span class="inline-flex items-center px-2.5 py-1 text-xs font-bold uppercase tracking-wider text-white rounded-full" 
                style="background: var(--color-primary);">
            {category.data.name}
          </span>
        </div>
      )}
      
      <!-- Read Time Badge -->
      <div class="absolute top-3 right-3">
        <span class="inline-flex items-center gap-1 px-2 py-1 text-xs font-medium text-white rounded-full backdrop-blur-sm" 
              style="background: rgba(0,0,0,0.6);">
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          {readTime} min
        </span>
      </div>
    </div>
  ) : (
    <!-- Compact Fallback for posts without images -->
    <div class="relative aspect-[16/10] flex items-center justify-center" 
         style="background: linear-gradient(135deg, var(--bg-secondary), var(--bg-tertiary));">
      <div class="text-center">
        <div class="w-12 h-12 mx-auto mb-2 rounded-full flex items-center justify-center" 
             style="background: var(--color-primary); opacity: 0.2;">
          <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20" style="color: var(--color-primary);">
            <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path>
          </svg>
        </div>
        {category && (
          <span class="inline-flex items-center px-2.5 py-1 text-xs font-bold uppercase tracking-wider rounded-full" 
                style="background: var(--color-primary); color: white;">
            {category.data.name}
          </span>
        )}
      </div>
    </div>
  )}
  
  <!-- Compact Content Section -->
  <div class="p-4 flex flex-col">
    
    <!-- Meta Information -->
    <div class="flex items-center justify-between mb-3">
      <div class="flex items-center gap-2 text-sm" style="color: var(--text-muted);">
        {postData.data.pubDate && (
          <time datetime={postData.data.pubDate.toISOString()} class="flex items-center gap-1">
            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
            {formatDate(postData.data.pubDate)}
          </time>
        )}
      </div>
      
      {author && (
        <div class="flex items-center gap-1.5 text-sm" style="color: var(--text-secondary);">
          <div class="w-5 h-5 rounded-full flex items-center justify-center text-xs font-bold text-white" 
               style="background: var(--color-primary);">
            {author.data.name[0].toUpperCase()}
          </div>
          <span class="font-medium text-xs">{author.data.name}</span>
        </div>
      )}
    </div>
    
    <!-- Title -->
    <h3 class="text-lg font-bold mb-2 leading-tight" style="color: var(--text-primary); font-family: var(--font-heading);">
      <a href={url || `/blog/${postData.id}`} 
         class="block transition-colors hover:underline decoration-2 underline-offset-2"
         style="color: inherit; transition: color var(--animation-duration) var(--animation-easing); text-decoration-color: var(--color-primary);"
         onmouseover="this.style.color='var(--color-primary)';"
         onmouseout="this.style.color='var(--text-primary)';">
        {postData.data.title}
      </a>
    </h3>
    
    <!-- Description -->
    {postData.data.description && (
      <p class="mb-3 leading-relaxed text-sm line-clamp-2" style="color: var(--text-secondary); font-family: var(--font-body);">
        {postData.data.description}
      </p>
    )}
    
    <!-- Tags -->
    {tagNames.length > 0 && (
      <div class="flex flex-wrap gap-1.5 mb-3">
        {tagNames.slice(0, 2).map((tag: string) => (
          <span class="inline-flex items-center px-2 py-0.5 text-xs font-medium rounded-full transition-colors" 
                style="background: var(--bg-tertiary); color: var(--color-primary); border: 1px solid var(--border-light);"
                onmouseover="this.style.background='var(--color-primary)'; this.style.color='white';"
                onmouseout="this.style.background='var(--bg-tertiary)'; this.style.color='var(--color-primary)';">
            #{tag}
          </span>
        ))}
        {tagNames.length > 2 && (
          <span class="inline-flex items-center px-2 py-0.5 text-xs font-medium rounded-full" 
                style="background: var(--bg-tertiary); color: var(--text-muted); border: 1px solid var(--border-light);">
            +{tagNames.length - 2}
          </span>
        )}
      </div>
    )}
    
    <!-- Action Footer -->
    <div class="flex items-center justify-between pt-3 border-t" style="border-color: var(--border-light);">
      <a 
        href={url || `/blog/${postData.id}`}
        class="inline-flex items-center gap-1.5 px-3 py-1.5 font-semibold text-sm rounded-full transition-all duration-300"
        style="background: var(--color-primary); color: white; transition: all var(--animation-duration) var(--animation-easing);"
        onmouseover="this.style.background='var(--color-primary-dark)'; this.style.transform='translateY(-1px)';"
        onmouseout="this.style.background='var(--color-primary)'; this.style.transform='translateY(0)';"
      >
        <span>Read More</span>
        <svg class="w-3 h-3 transition-transform group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
        </svg>
      </a>
      
      <!-- Engagement Indicators -->
      <div class="flex items-center gap-2 text-xs" style="color: var(--text-muted);">
        <span class="flex items-center gap-1">
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
          </svg>
          {Math.floor(Math.random() * 500) + 100}
        </span>
      </div>
    </div>
  </div>
</article>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>