---
// Simple YouTube Component for MDX
interface Props {
  id: string;
  title?: string;
}

const { id, title = "YouTube Video" } = Astro.props;

// Extract video ID from various YouTube URL formats if a full URL is provided
function extractVideoId(input: string): string {
  // If it's already just an ID, return it
  if (input.length === 11 && !input.includes('/') && !input.includes('?')) {
    return input;
  }
  
  // Extract from various YouTube URL formats
  const patterns = [
    /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([^&\n?#]+)/,
    /youtube\.com\/watch\?.*v=([^&\n?#]+)/
  ];
  
  for (const pattern of patterns) {
    const match = input.match(pattern);
    if (match) return match[1];
  }
  
  // If no pattern matches, assume it's already a video ID
  return input;
}

const videoId = extractVideoId(id);
---

<!-- Simple YouTube Embed -->
<div 
  class="youtube-embed-container"
  style="position: relative; width: 100%; padding-bottom: 56.25%; height: 0; overflow: hidden; border-radius: 12px; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1); margin: 2rem 0;"
>
  <iframe 
    style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: none;"
    src={`https://www.youtube-nocookie.com/embed/${videoId}?modestbranding=1&rel=0`}
    title={title}
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
    allowfullscreen
    loading="lazy">
  </iframe>
</div>

<!-- SEO Structured Data -->
<script type="application/ld+json" set:html={JSON.stringify({
  "@context": "https://schema.org",
  "@type": "VideoObject",
  "name": title,
  "description": title,
  "thumbnailUrl": `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`,
  "uploadDate": new Date().toISOString(),
  "contentUrl": `https://www.youtube.com/watch?v=${videoId}`,
  "embedUrl": `https://www.youtube-nocookie.com/embed/${videoId}`,
  "publisher": {
    "@type": "Organization",
    "name": "YouTube",
    "url": "https://www.youtube.com/"
  }
})} />