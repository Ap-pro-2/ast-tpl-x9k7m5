---
// Clean Markdown Post Layout - Minimal & Efficient
import { formatDate } from "../core/blogLogic";
import { getEntry } from "astro:content";
import OptimizedImage from "../components/ui/OptimizedImage.astro";
import BaseLayout from "./BaseLayout.astro";
import Breadcrumb from "../components/navigation/Breadcrumb.astro";
import { generateBreadcrumbs } from "../core/navigation/breadcrumbUtils";
import { Schema } from "../core/seo";

const { frontmatter, schemaData, headings } = Astro.props;

// Get author and category data
let author = null;
let category = null;

try {
  if (frontmatter.author) {
    const authorId =
      typeof frontmatter.author === "string"
        ? frontmatter.author
        : frontmatter.author.id;
    author = await getEntry("authors", authorId);
  }
  if (frontmatter.category) {
    const categoryId =
      typeof frontmatter.category === "string"
        ? frontmatter.category
        : frontmatter.category.id;
    category = await getEntry("categories", categoryId);
  }
} catch (error) {
  // Handle missing data gracefully
}

// Process tags
let tagData: any[] = [];
if (frontmatter.tags?.length > 0) {
  try {
    tagData = await Promise.all(
      frontmatter.tags.map(async (tagId: any) => {
        try {
          const tag = await getEntry("tags", tagId);
          return tag || { id: tagId, data: { name: tagId } };
        } catch (error) {
          return { id: tagId, data: { name: tagId } };
        }
      }),
    );
  } catch (error) {
    tagData = [];
  }
}

const formattedDate = formatDate(frontmatter.pubDate);
const pageData = {
  title: frontmatter.title,
  category: category
    ? { id: category.id, name: category.data.name, slug: category.data.slug }
    : undefined,
};
const breadcrumbs = generateBreadcrumbs(`/blog/${frontmatter.title}`, pageData);
---

<BaseLayout
  pageTitle={frontmatter.title}
  description={frontmatter.description}
  isArticle={true}
  ogImage={frontmatter.image?.url}
  ogImageAlt={frontmatter.image?.alt || frontmatter.title}
>
  {schemaData && <Schema item={schemaData} slot="head" />}

  <!-- SEO Meta Tags -->
  <meta property="og:type" content="article" slot="head" />
  <meta
    property="article:author"
    content={author?.data.name || "Author"}
    slot="head"
  />
  <meta
    property="article:published_time"
    content={frontmatter.pubDate.toISOString()}
    slot="head"
  />
  {
    frontmatter.tags && (
      <meta
        property="article:tag"
        content={frontmatter.tags.join(", ")}
        slot="head"
      />
    )
  }
  <meta name="twitter:card" content="summary_large_image" slot="head" />
  <meta name="twitter:title" content={frontmatter.title} slot="head" />
  <meta
    name="twitter:description"
    content={frontmatter.description}
    slot="head"
  />
  {
    frontmatter.image?.url && (
      <meta name="twitter:image" content={frontmatter.image.url} slot="head" />
    )
  }
  {
    frontmatter.image?.url && (
      <link
        rel="preload"
        as="image"
        href={frontmatter.image.url}
        fetchpriority="high"
        slot="head"
      />
    )
  }

  <!-- Clean Post Layout -->
  <div class="content-box">
    <div class="px-4 sm:px-6 lg:px-8 py-6 sm:py-8">
      <!-- Breadcrumb -->
      <div class="hidden sm:block mb-6 max-w-7xl mx-auto">
        <Breadcrumb items={breadcrumbs} />
      </div>


      <!-- Main Layout -->
      <div class="max-w-7xl mx-auto">
        <div class="lg:grid lg:grid-cols-12 lg:gap-8">
          <!-- Main Content -->
          <main class="lg:col-span-8">
            <article class="space-y-6">
              <!-- Header -->
              <header class="space-y-4">
                {
                  category && (
                    <div>
                      <a
                        href={`/categories/${category.data.slug || category.id}`}
                        class="category-badge-accessible inline-flex items-center px-3 py-1.5 text-xs font-semibold uppercase tracking-wider"
                      >
                        {category.data.name}
                      </a>
                    </div>
                  )
                }

                <h1
                  class="text-3xl sm:text-4xl lg:text-5xl font-bold leading-tight"
                  style="color: var(--text-primary); font-family: var(--font-heading)"
                >
                  {frontmatter.title}
                </h1>

                <div
                  class="flex flex-wrap items-center gap-4 text-sm"
                  style="color: var(--text-secondary);"
                >
                  {
                    author && (
                      <div class="flex items-center gap-2">
                        <svg
                          class="w-4 h-4"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                          />
                        </svg>
                        <span
                          class="font-medium"
                          style="color: var(--text-primary);"
                        >
                          {author.data.name}
                        </span>
                      </div>
                    )
                  }

                  <div class="flex items-center gap-2">
                    <svg
                      class="w-4 h-4"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                      ></path>
                    </svg>
                    <time datetime={frontmatter.pubDate.toISOString()}
                      >{formattedDate}</time
                    >
                  </div>

                  <div class="flex items-center gap-2">
                    <svg
                      class="w-4 h-4"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span>5 min read</span>
                  </div>
                </div>
              </header>

              <!-- Featured Image -->
              {
                frontmatter.image?.url && (
                  <div class="aspect-[16/9] overflow-hidden image-frame">
                    <OptimizedImage
                      src={frontmatter.image.url}
                      alt={frontmatter.image.alt || frontmatter.title}
                      width={800}
                      height={450}
                      priority={true}
                      format="webp"
                      quality={85}
                      class="w-full h-full object-cover"
                    />
                  </div>
                )
              }

              <!-- Table of Contents - Below Image for All Devices -->
              <div class="toc-section">
                <div class="theme-card">
                  <div class="p-4 lg:p-6">
                    <!-- Mobile: Collapsible TOC -->
                    <div class="lg:hidden">
                      <button id="mobile-toc-toggle" 
                              class="flex items-center justify-between w-full text-left">
                        <div class="flex items-center gap-3">
                          <div class="w-8 h-8 rounded-lg flex items-center justify-center"
                               style="background: linear-gradient(135deg, var(--color-primary), var(--color-primary-dark));">
                            <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                    d="M4 6h16M4 10h16M4 14h16M4 18h16"/>
                            </svg>
                          </div>
                          <h3 class="text-lg font-bold" style="color: var(--text-primary); font-family: var(--font-heading);">
                            Table of Contents
                          </h3>
                        </div>
                        <svg id="mobile-toc-chevron" class="w-5 h-5 transition-transform duration-300" 
                             style="color: var(--text-secondary);" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                        </svg>
                      </button>
                      <nav class="toc-nav overflow-hidden transition-all duration-300" id="mobile-toc-content" style="max-height: 0;">
                        <div class="pt-4">
                          <ul class="space-y-1" id="mobile-toc-list">
                            <!-- TOC will be populated by JavaScript -->
                          </ul>
                        </div>
                      </nav>
                    </div>

                    <!-- Desktop: Collapsible TOC -->
                    <div class="hidden lg:block">
                      <button id="desktop-toc-toggle" 
                              class="flex items-center justify-between w-full text-left">
                        <div class="flex items-center gap-3">
                          <div class="w-8 h-8 rounded-lg flex items-center justify-center"
                               style="background: linear-gradient(135deg, var(--color-primary), var(--color-primary-dark));">
                            <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                    d="M4 6h16M4 10h16M4 14h16M4 18h16"/>
                            </svg>
                          </div>
                          <h3 class="text-lg font-bold" style="color: var(--text-primary); font-family: var(--font-heading);">
                            Table of Contents
                          </h3>
                        </div>
                        <svg id="desktop-toc-chevron" class="w-5 h-5 transition-transform duration-300" 
                             style="color: var(--text-secondary);" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                        </svg>
                      </button>
                      <nav class="toc-nav overflow-hidden transition-all duration-300" id="desktop-toc-content" style="max-height: 0;">
                        <div class="pt-4">
                          <ul class="space-y-1" id="desktop-toc-list">
                            <!-- TOC will be populated by JavaScript -->
                          </ul>
                        </div>
                      </nav>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Content -->
              <div class="prose max-w-none" id="blog-content">
                <slot />
              </div>

              <!-- Tags -->
              {
                tagData.length > 0 && (
                  <div
                    class="pt-6 border-t"
                    style="border-color: var(--border-light);"
                  >
                    <div class="flex items-center gap-2 mb-3">
                      <svg
                        class="w-5 h-5"
                        style="color: var(--color-primary)"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"
                        />
                      </svg>
                      <h3
                        class="text-lg font-bold"
                        style="color: var(--text-primary); font-family: var(--font-heading)"
                      >
                        Tags
                      </h3>
                    </div>
                    <div class="flex flex-wrap gap-2">
                      {tagData.map((tag) => (
                        <a
                          href={`/tags/${tag.data.slug || tag.id}`}
                          class="category-badge-accessible inline-flex items-center px-3 py-1.5 text-sm font-medium hover-lift"
                        >
                          #{tag.data.name}
                        </a>
                      ))}
                    </div>
                  </div>
                )
              }
            </article>
          </main>


          <!-- Desktop Sidebar -->
          <aside class="hidden lg:block lg:col-span-4">
            <div class="sidebar-sticky">

              <!-- Author Card -->
              {author && (
                <div class="theme-card sidebar-card">
                  <div class="p-6 text-center">
                    <div class="flex items-center gap-3 mb-4">
                      <div class="w-8 h-8 rounded-lg flex items-center justify-center"
                           style="background: linear-gradient(135deg, var(--color-primary), var(--color-primary-dark));">
                        <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                        </svg>
                      </div>
                      <h3 class="text-lg font-bold" style="color: var(--text-primary); font-family: var(--font-heading);">
                        About the Author
                      </h3>
                    </div>
                    
                    <div class="mb-4">
                      {author.data.avatar ? (
                        <img src={author.data.avatar} 
                             alt={author.data.name}
                             class="w-16 h-16 rounded-full object-cover mx-auto shadow-md"
                             loading="lazy" />
                      ) : (
                        <div class="w-16 h-16 rounded-full flex items-center justify-center mx-auto text-xl font-bold text-white shadow-md"
                             style="background: linear-gradient(135deg, var(--color-primary), var(--color-primary-dark));">
                          {author.data.name[0].toUpperCase()}
                        </div>
                      )}
                    </div>
                    
                    <h4 class="text-lg font-semibold mb-2" style="color: var(--text-primary);">
                      {author.data.name}
                    </h4>
                    
                    {author.data.bio && (
                      <p class="text-sm mb-4 leading-relaxed" style="color: var(--text-secondary);">
                        {author.data.bio}
                      </p>
                    )}
                    
                    <a href={`/authors/${author.id}`} 
                       class="inline-flex items-center gap-2 px-4 py-2 text-sm font-medium rounded-lg transition-all duration-300 hover:-translate-y-0.5 hover:shadow-lg"
                       style="background: var(--bg-tertiary); color: var(--color-primary); border: 1px solid var(--border-accent);"
                       onmouseover="this.style.background='var(--color-primary)'; this.style.color='white';"
                       onmouseout="this.style.background='var(--bg-tertiary)'; this.style.color='var(--color-primary)';">
                      <span>View Profile</span>
                      <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"/>
                      </svg>
                    </a>
                  </div>
                </div>
              )}


              <!-- Share Article -->
              <div class="theme-card sidebar-card">
                <div class="p-6">
                  <div class="flex items-center gap-3 mb-4">
                    <div class="w-8 h-8 rounded-lg flex items-center justify-center"
                         style="background: linear-gradient(135deg, var(--color-primary), var(--color-primary-dark));">
                      <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                              d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"/>
                      </svg>
                    </div>
                    <h3 class="text-lg font-bold" style="color: var(--text-primary); font-family: var(--font-heading);">
                      Share Article
                    </h3>
                  </div>
                  
                  <div class="grid grid-cols-2 gap-3">
                    <button onclick="shareTwitter()" 
                            class="flex items-center justify-center gap-2 p-3 rounded-lg transition-all duration-300 hover:-translate-y-0.5 hover:shadow-lg"
                            style="background: var(--bg-tertiary); color: var(--text-secondary); border: 1px solid var(--border-default);"
                            onmouseover="this.style.background='var(--color-social-twitter)'; this.style.color='white'; this.style.borderColor='var(--color-social-twitter)';"
                            onmouseout="this.style.background='var(--bg-tertiary)'; this.style.color='var(--text-secondary)'; this.style.borderColor='var(--border-default)';">
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
                      </svg>
                      <span class="text-sm font-medium">Twitter</span>
                    </button>
                    
                    <button onclick="shareLinkedIn()" 
                            class="flex items-center justify-center gap-2 p-3 rounded-lg transition-all duration-300 hover:-translate-y-0.5 hover:shadow-lg"
                            style="background: var(--bg-tertiary); color: var(--text-secondary); border: 1px solid var(--border-default);"
                            onmouseover="this.style.background='var(--color-social-linkedin)'; this.style.color='white'; this.style.borderColor='var(--color-social-linkedin)';"
                            onmouseout="this.style.background='var(--bg-tertiary)'; this.style.color='var(--text-secondary)'; this.style.borderColor='var(--border-default)';">
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                      </svg>
                      <span class="text-sm font-medium">LinkedIn</span>
                    </button>
                    
                    <button onclick="shareFacebook()" 
                            class="flex items-center justify-center gap-2 p-3 rounded-lg transition-all duration-300 hover:-translate-y-0.5 hover:shadow-lg"
                            style="background: var(--bg-tertiary); color: var(--text-secondary); border: 1px solid var(--border-default);"
                            onmouseover="this.style.background='var(--color-social-facebook)'; this.style.color='white'; this.style.borderColor='var(--color-social-facebook)';"
                            onmouseout="this.style.background='var(--bg-tertiary)'; this.style.color='var(--text-secondary)'; this.style.borderColor='var(--border-default)';">
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
                      </svg>
                      <span class="text-sm font-medium">Facebook</span>
                    </button>
                    
                    <button onclick="copyLink()" 
                            class="flex items-center justify-center gap-2 p-3 rounded-lg transition-all duration-300 hover:-translate-y-0.5 hover:shadow-lg"
                            style="background: var(--bg-tertiary); color: var(--text-secondary); border: 1px solid var(--border-default);"
                            onmouseover="this.style.background='var(--color-primary)'; this.style.color='white'; this.style.borderColor='var(--color-primary)';"
                            onmouseout="this.style.background='var(--bg-tertiary)'; this.style.color='var(--text-secondary)'; this.style.borderColor='var(--border-default)';">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                              d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
                      </svg>
                      <span class="text-sm font-medium">Copy Link</span>
                    </button>
                  </div>
                </div>
              </div>

              <!-- Related Topics -->
              {tagData.length > 0 && (
                <div class="theme-card sidebar-card">
                  <div class="p-6">
                    <div class="flex items-center gap-3 mb-4">
                      <div class="w-8 h-8 rounded-lg flex items-center justify-center"
                           style="background: linear-gradient(135deg, var(--color-primary), var(--color-primary-dark));">
                        <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"/>
                        </svg>
                      </div>
                      <h3 class="text-lg font-bold" style="color: var(--text-primary); font-family: var(--font-heading);">
                        Related Topics
                      </h3>
                    </div>
                    
                    <div class="flex flex-wrap gap-2">
                      {tagData.slice(0, 6).map((tag) => (
                        <a href={`/tags/${tag.data.slug || tag.id}`}
                           class="inline-flex items-center px-3 py-1.5 text-xs font-medium rounded-full transition-all duration-300 hover:-translate-y-0.5 hover:shadow-md"
                           style="background: var(--bg-tertiary); color: var(--color-primary); border: 1px solid var(--border-accent);"
                           onmouseover="this.style.background='var(--color-primary)'; this.style.color='white';"
                           onmouseout="this.style.background='var(--bg-tertiary)'; this.style.color='var(--color-primary)';">
                          #{tag.data.name}
                        </a>
                      ))}
                    </div>
                  </div>
                </div>
              )}


            </div>
          </aside>
        </div>
      </div>
    </div>
  </div>

  <!-- Styles -->
  <style>
    /* Perfect Sticky Desktop Sidebar */
    .sidebar-sticky {
      position: sticky;
      top: 6rem; /* Increased from 1rem to account for header height */
      height: fit-content;
      /* Clean sticky positioning that follows page scroll and avoids header overlap */
    }

    /* TOC Section Styles */
    .toc-section {
      margin: 2rem 0;
    }

    /* Professional Numbered TOC Navigation */
    .numbered-toc-link {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      padding: 0.75rem 1rem;
      margin: 0.25rem 0;
      border-radius: 0.75rem;
      transition: all 0.3s ease;
      border-left: 3px solid transparent;
      font-weight: 500;
      letter-spacing: 0.025em;
      text-decoration: none;
    }

    .toc-number {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      min-width: 1.5rem;
      height: 1.5rem;
      border-radius: 50%;
      font-size: 0.75rem;
      font-weight: 600;
      background: var(--bg-tertiary);
      color: var(--color-primary);
      border: 1px solid var(--border-accent);
      transition: all 0.3s ease;
    }

    .toc-text {
      flex: 1;
      position: relative;
      transition: all 0.3s ease;
    }

    .toc-text::after {
      content: '';
      position: absolute;
      bottom: -2px;
      left: 0;
      width: 0;
      height: 2px;
      background: linear-gradient(90deg, var(--color-primary), var(--color-primary-dark));
      transition: width 0.3s ease;
    }

    .numbered-toc-link:hover {
      background: var(--bg-tertiary);
      color: var(--color-primary);
      transform: translateX(6px);
      border-left-color: var(--color-primary);
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .numbered-toc-link:hover .toc-number {
      background: var(--color-primary);
      color: white;
      transform: scale(1.1);
    }

    .numbered-toc-link:hover .toc-text::after {
      width: 100%;
    }

    .numbered-toc-link.active {
      background: var(--bg-tertiary);
      color: var(--color-primary);
      border-left-color: var(--color-primary);
      font-weight: 600;
    }

    .numbered-toc-link.active .toc-number {
      background: var(--color-primary);
      color: white;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    }

    .numbered-toc-link.active .toc-text::after {
      width: 100%;
    }

    /* Clean Sidebar Cards */
    .sidebar-card {
      margin-bottom: 1.5rem;
      transition: all 0.3s ease;
    }

    .sidebar-card:last-child {
      margin-bottom: 0;
    }

    .sidebar-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    }

    /* Smooth scrolling */
    html {
      scroll-behavior: smooth;
    }
  </style>

  <!-- Enhanced Interactive Sidebar Script -->
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const currentDomain = window.location.hostname;
      const blogContent = document.getElementById("blog-content");

      // Handle external links
      if (blogContent) {
        const links = blogContent.querySelectorAll("a[href]");
        links.forEach((link) => {
          const href = link.getAttribute("href");
          if (!href || href.startsWith("#")) return;

          try {
            const url = new URL(href, window.location.origin);
            const isExternal = url.hostname !== currentDomain;

            if (isExternal) {
              link.setAttribute("target", "_blank");
              link.setAttribute("rel", "noopener noreferrer nofollow");

              if (!link.querySelector(".external-link-icon")) {
                const icon = document.createElement("span");
                icon.className = "external-link-icon";
                icon.innerHTML =
                  ' <svg style="display: inline; width: 12px; height: 12px; margin-left: 2px; opacity: 0.7;" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path></svg>';
                link.appendChild(icon);
              }

              const currentTitle = link.getAttribute("title") || "";
              link.setAttribute(
                "title",
                currentTitle + (currentTitle ? " " : "") + "(Opens in new tab)",
              );
            }
          } catch (e) {
            // Continue for invalid URLs
          }
        });
      }

      // Generate Table of Contents - Only H2 headings
      function generateTOC() {
        const desktopTocList = document.getElementById('desktop-toc-list');
        const mobileTocList = document.getElementById('mobile-toc-list');
        
        if (!blogContent) return;

        // Only select H2 headings
        const headings = blogContent.querySelectorAll('h2');
        if (headings.length === 0) {
          const noHeadingsMessage = '<li class="text-sm" style="color: var(--text-muted);">No sections found</li>';
          if (desktopTocList) desktopTocList.innerHTML = noHeadingsMessage;
          if (mobileTocList) mobileTocList.innerHTML = noHeadingsMessage;
          return;
        }

        const tocItems = [];
        headings.forEach((heading, index) => {
          const id = heading.id || `section-${index}`;
          if (!heading.id) heading.id = id;

          const text = heading.textContent.trim();
          const number = index + 1;
          
          tocItems.push(`
            <li class="toc-item">
              <a href="#${id}" 
                 class="toc-link numbered-toc-link"
                 style="color: var(--text-secondary);">
                <span class="toc-number">${number}.</span>
                <span class="toc-text">${text}</span>
              </a>
            </li>
          `);
        });

        const tocHTML = tocItems.join('');
        if (desktopTocList) desktopTocList.innerHTML = tocHTML;
        if (mobileTocList) mobileTocList.innerHTML = tocHTML;
      }


      // Social Sharing Functions
      window.shareTwitter = function() {
        const text = document.title;
        const url = window.location.href;
        window.open(`https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(url)}`, '_blank', 'width=600,height=400');
      };

      window.shareLinkedIn = function() {
        const url = window.location.href;
        window.open(`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(url)}`, '_blank', 'width=600,height=400');
      };

      window.shareFacebook = function() {
        const url = window.location.href;
        window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`, '_blank', 'width=600,height=400');
      };

      window.copyLink = function() {
        navigator.clipboard.writeText(window.location.href).then(() => {
          // Show a temporary success message
          const button = event.target.closest('button');
          const originalText = button.querySelector('span').textContent;
          button.querySelector('span').textContent = 'Copied!';
          setTimeout(() => {
            button.querySelector('span').textContent = originalText;
          }, 2000);
        });
      };


      // TOC link smooth scrolling
      document.addEventListener('click', function(e) {
        const tocLink = e.target.closest('.numbered-toc-link');
        if (tocLink) {
          e.preventDefault();
          const targetId = tocLink.getAttribute('href').substring(1);
          const targetElement = document.getElementById(targetId);
          if (targetElement) {
            targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
          }
        }
      });

      // TOC Toggle Functionality for both Mobile and Desktop
      function initTOCToggles() {
        // Mobile TOC Toggle
        const mobileToggle = document.getElementById('mobile-toc-toggle');
        const mobileContent = document.getElementById('mobile-toc-content');
        const mobileChevron = document.getElementById('mobile-toc-chevron');

        if (mobileToggle && mobileContent && mobileChevron) {
          let mobileIsOpen = false;

          mobileToggle.addEventListener('click', function() {
            mobileIsOpen = !mobileIsOpen;
            
            if (mobileIsOpen) {
              mobileContent.style.maxHeight = mobileContent.scrollHeight + 'px';
              mobileChevron.style.transform = 'rotate(180deg)';
            } else {
              mobileContent.style.maxHeight = '0';
              mobileChevron.style.transform = 'rotate(0deg)';
            }
          });
        }

        // Desktop TOC Toggle
        const desktopToggle = document.getElementById('desktop-toc-toggle');
        const desktopContent = document.getElementById('desktop-toc-content');
        const desktopChevron = document.getElementById('desktop-toc-chevron');

        if (desktopToggle && desktopContent && desktopChevron) {
          let desktopIsOpen = false;

          desktopToggle.addEventListener('click', function() {
            desktopIsOpen = !desktopIsOpen;
            
            if (desktopIsOpen) {
              desktopContent.style.maxHeight = desktopContent.scrollHeight + 'px';
              desktopChevron.style.transform = 'rotate(180deg)';
            } else {
              desktopContent.style.maxHeight = '0';
              desktopChevron.style.transform = 'rotate(0deg)';
            }
          });
        }
      }

      // Initialize features
      generateTOC();
      initTOCToggles();
      
      // Optimized Active TOC Highlighting - H2 only
      let ticking = false;
      function updateActiveTOCItem() {
        if (!ticking) {
          requestAnimationFrame(() => {
            const headings = blogContent?.querySelectorAll('h2') || [];
            
            let activeHeading = null;
            const scrollTop = window.pageYOffset + 150; // Better offset for active detection

            // Find the current active heading
            for (let i = headings.length - 1; i >= 0; i--) {
              const heading = headings[i];
              const headingTop = heading.offsetTop;
              
              if (scrollTop >= headingTop) {
                activeHeading = heading;
                break;
              }
            }
            
            // Update TOC links
            const tocLinks = document.querySelectorAll('.numbered-toc-link');
            tocLinks.forEach(link => {
              const isActive = activeHeading && link.getAttribute('href') === `#${activeHeading.id}`;
              link.classList.toggle('active', isActive);
            });
            
            ticking = false;
          });
          ticking = true;
        }
      }
      
      window.addEventListener('scroll', updateActiveTOCItem);
    });
  </script>
</BaseLayout>
