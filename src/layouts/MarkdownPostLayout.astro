---
// Clean Markdown Post Layout - Minimal & Efficient
import { formatDate } from "../core/blogLogic";
import { getEntry } from "astro:content";
import OptimizedImage from "../components/ui/OptimizedImage.astro";
import BaseLayout from "./BaseLayout.astro";
import Breadcrumb from "../components/navigation/Breadcrumb.astro";
import { generateBreadcrumbs } from "../core/navigation/breadcrumbUtils";
import { Schema } from "../core/seo";

const { frontmatter, schemaData, headings } = Astro.props;

// Get author and category data
let author = null;
let category = null;

try {
  if (frontmatter.author) {
    const authorId =
      typeof frontmatter.author === "string"
        ? frontmatter.author
        : frontmatter.author.id;
    author = await getEntry("authors", authorId);
  }
  if (frontmatter.category) {
    const categoryId =
      typeof frontmatter.category === "string"
        ? frontmatter.category
        : frontmatter.category.id;
    category = await getEntry("categories", categoryId);
  }
} catch (error) {
  // Handle missing data gracefully
}

// Process tags
let tagData: any[] = [];
if (frontmatter.tags?.length > 0) {
  try {
    tagData = await Promise.all(
      frontmatter.tags.map(async (tagId: any) => {
        try {
          const tag = await getEntry("tags", tagId);
          return tag || { id: tagId, data: { name: tagId } };
        } catch (error) {
          return { id: tagId, data: { name: tagId } };
        }
      }),
    );
  } catch (error) {
    tagData = [];
  }
}

const formattedDate = formatDate(frontmatter.pubDate);
const pageData = {
  title: frontmatter.title,
  category: category
    ? { id: category.id, name: category.data.name, slug: category.data.slug }
    : undefined,
};
const breadcrumbs = generateBreadcrumbs(`/blog/${frontmatter.title}`, pageData);
---

<BaseLayout
  pageTitle={frontmatter.title}
  description={frontmatter.description}
  isArticle={true}
  ogImage={frontmatter.image?.url}
  ogImageAlt={frontmatter.image?.alt || frontmatter.title}
>
  {schemaData && <Schema item={schemaData} slot="head" />}

  <!-- SEO Meta Tags -->
  <meta property="og:type" content="article" slot="head" />
  <meta
    property="article:author"
    content={author?.data.name || "Author"}
    slot="head"
  />
  <meta
    property="article:published_time"
    content={frontmatter.pubDate.toISOString()}
    slot="head"
  />
  {
    frontmatter.tags && (
      <meta
        property="article:tag"
        content={frontmatter.tags.join(", ")}
        slot="head"
      />
    )
  }
  <meta name="twitter:card" content="summary_large_image" slot="head" />
  <meta name="twitter:title" content={frontmatter.title} slot="head" />
  <meta
    name="twitter:description"
    content={frontmatter.description}
    slot="head"
  />
  {
    frontmatter.image?.url && (
      <meta name="twitter:image" content={frontmatter.image.url} slot="head" />
    )
  }
  {
    frontmatter.image?.url && (
      <link
        rel="preload"
        as="image"
        href={frontmatter.image.url}
        fetchpriority="high"
        slot="head"
      />
    )
  }

  <!-- Clean Post Layout -->
  <div class="content-box">
    <div class="px-4 sm:px-6 lg:px-8 py-6 sm:py-8">
      <!-- Breadcrumb -->
      <div class="hidden sm:block mb-6 max-w-7xl mx-auto">
        <Breadcrumb items={breadcrumbs} />
      </div>

      <!-- Main Layout -->
      <div class="max-w-7xl mx-auto">
        <div class="lg:grid lg:grid-cols-12 lg:gap-8">
          <!-- Main Content -->
          <main class="lg:col-span-8">
            <article class="space-y-6">
              <!-- Header -->
              <header class="space-y-4">
                {
                  category && (
                    <div>
                      <a
                        href={`/categories/${category.data.slug || category.id}`}
                        class="category-badge-accessible inline-flex items-center px-3 py-1.5 text-xs font-semibold uppercase tracking-wider"
                      >
                        {category.data.name}
                      </a>
                    </div>
                  )
                }

                <h1
                  class="text-3xl sm:text-4xl lg:text-5xl font-bold leading-tight"
                  style="color: var(--text-primary); font-family: var(--font-heading)"
                >
                  {frontmatter.title}
                </h1>

                <div
                  class="flex flex-wrap items-center gap-4 text-sm"
                  style="color: var(--text-secondary);"
                >
                  {
                    author && (
                      <div class="flex items-center gap-2">
                        <svg
                          class="w-4 h-4"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                          />
                        </svg>
                        <span
                          class="font-medium"
                          style="color: var(--text-primary);"
                        >
                          {author.data.name}
                        </span>
                      </div>
                    )
                  }

                  <div class="flex items-center gap-2">
                    <svg
                      class="w-4 h-4"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                      ></path>
                    </svg>
                    <time datetime={frontmatter.pubDate.toISOString()}
                      >{formattedDate}</time
                    >
                  </div>

                  <div class="flex items-center gap-2">
                    <svg
                      class="w-4 h-4"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span>5 min read</span>
                  </div>
                </div>
              </header>

              <!-- Featured Image -->
              {
                frontmatter.image?.url && (
                  <div class="aspect-[16/9] overflow-hidden image-frame">
                    <OptimizedImage
                      src={frontmatter.image.url}
                      alt={frontmatter.image.alt || frontmatter.title}
                      width={800}
                      height={450}
                      priority={true}
                      format="webp"
                      quality={85}
                      class="w-full h-full object-cover"
                    />
                  </div>
                )
              }

              <!-- Content -->
              <div class="prose max-w-none" id="blog-content">
                <slot />
              </div>

              <!-- Tags -->
              {
                tagData.length > 0 && (
                  <div
                    class="pt-6 border-t"
                    style="border-color: var(--border-light);"
                  >
                    <div class="flex items-center gap-2 mb-3">
                      <svg
                        class="w-5 h-5"
                        style="color: var(--color-primary)"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"
                        />
                      </svg>
                      <h3
                        class="text-lg font-bold"
                        style="color: var(--text-primary); font-family: var(--font-heading)"
                      >
                        Tags
                      </h3>
                    </div>
                    <div class="flex flex-wrap gap-2">
                      {tagData.map((tag) => (
                        <a
                          href={`/tags/${tag.data.slug || tag.id}`}
                          class="category-badge-accessible inline-flex items-center px-3 py-1.5 text-sm font-medium hover-lift"
                        >
                          #{tag.data.name}
                        </a>
                      ))}
                    </div>
                  </div>
                )
              }
            </article>
          </main>

          <!-- Clean Sidebar -->
          <aside class="hidden lg:block lg:col-span-4">
            <div class="sidebar-sticky">
              <!-- Sidebar content will be added here -->
            </div>
          </aside>
        </div>
      </div>
    </div>
  </div>

  <!-- Styles -->
  <style>
    /* Perfect Sticky Sidebar */
    .sidebar-sticky {
      position: sticky;
      top: 1.5rem;
      max-height: calc(100vh - 3rem);
      overflow-y: auto;
      scroll-behavior: smooth;
      scrollbar-width: thin;
      scrollbar-color: var(--color-primary) var(--bg-tertiary);
    }

    .sidebar-sticky::-webkit-scrollbar {
      width: 6px;
    }

    .sidebar-sticky::-webkit-scrollbar-track {
      background: var(--bg-tertiary);
      border-radius: 3px;
    }

    .sidebar-sticky::-webkit-scrollbar-thumb {
      background: var(--color-primary);
      border-radius: 3px;
      transition: background 0.2s ease;
    }

    .sidebar-sticky::-webkit-scrollbar-thumb:hover {
      background: var(--color-primary-dark);
    }
  </style>

  <!-- External Links Script -->
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const currentDomain = window.location.hostname;
      const blogContent = document.getElementById("blog-content");

      // Handle external links
      if (blogContent) {
        const links = blogContent.querySelectorAll("a[href]");
        links.forEach((link) => {
          const href = link.getAttribute("href");
          if (!href || href.startsWith("#")) return;

          try {
            const url = new URL(href, window.location.origin);
            const isExternal = url.hostname !== currentDomain;

            if (isExternal) {
              link.setAttribute("target", "_blank");
              link.setAttribute("rel", "noopener noreferrer nofollow");

              if (!link.querySelector(".external-link-icon")) {
                const icon = document.createElement("span");
                icon.className = "external-link-icon";
                icon.innerHTML =
                  ' <svg style="display: inline; width: 12px; height: 12px; margin-left: 2px; opacity: 0.7;" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path></svg>';
                link.appendChild(icon);
              }

              const currentTitle = link.getAttribute("title") || "";
              link.setAttribute(
                "title",
                currentTitle + (currentTitle ? " " : "") + "(Opens in new tab)",
              );
            }
          } catch (e) {
            // Continue for invalid URLs
          }
        });
      }
    });
  </script>
</BaseLayout>
